<tool id="simpleprojector2" name="simple projector 2" version="0.0.1">
  <description>Projects a simple dictionary on sections.</description>
  <!--command interpreter="python">
	simpleprojector2.py 
	-verbose ${verbose}  
  	-noColors ${noColors} 
	-dictFile ${input}
	-trieSink ${output}
	-targetLayerName ${tln} 
	-valueFeatures ${vf}
	-keyIndex ${ki} 
  </command-->
<command>
        alvisnlp
 	-noColors
	-param search dictFile ${input}
	-param search trieSink ${output}
	-param search targetLayerName ${tln} 
	-param search valueFeatures ${vf}
	-param search keyIndex ${ki}  
	${plan}
 </command>

  <inputs>
    <param format="txt" name="verbose" value="false" type="boolean" label="verbose" help=""/>

    <param format="txt" name="noColors" value="false" type="boolean" label="colors" help=""/>

    <param format="txt" name="input" type="data" label="dictionary" help="Source of the dictionary."/>

    <param name="tln" type="text" label="Target Layer Name" value="concepts" help="Name of the layer that contains the match annotations." />

    <param name="vf" type="text" label="Value Features" value="id,entry" help="Target features in match annotations. The values are the columns in the matched entry line." />

    <param name="ki" type="text" label="Key Index" value="0" help="Specifies the key column index (starting at 0)." />

    <param format="txt,xml" name="plan" type="data" label="Plan" help="The plan to use." />

  </inputs>

   

  <outputs>
    <data format="trie" name="output" help="If set, read the compiled dictionary from the specified files. Compiled dictionaries are generally faster for large dictionaries."/>
  </outputs>

  <tests>
    <test>
      <param name="input" value="dictionary-lemma.txt"/>
      <param name="targetLayerName" value="concepts"/>
      <param name="valueFeatures" value="id,entry"/>
      <param name="keyIndex" value="1"/>
      <output name="output" file="dictionary-lemma-output.trie"/>
    </test>
  </tests>
</tool>
